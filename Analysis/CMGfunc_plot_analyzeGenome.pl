#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
use Bio::SeqIO;
=put
#############################################################################
# Description
#############################################################################

#--------------------------------------------------------------
# Input source
#--------------------------------------------------------------

#--------------------------------------------------------------
# Input
#--------------------------------------------------------------

#--------------------------------------------------------------
# Output
#--------------------------------------------------------------

#--------------------------------------------------------------
# USAGE
#--------------------------------------------------------------

=cut

#.............. Get options ..............
#my ($res, $clancut, $gocut, $h);
my (@freqtablefiles, $h);
my ($freqcut,$percut,$widthmulti,$widthsingle) = (10,1,20,15);
my $CMGfunc_path	= "/home/cmgfunc/CMGfunc/indirect";

#http://perldoc.perl.org/Getopt/Long.html#Options-with-multiple-values

&GetOptions ("freq=s" =>  \@freqtablefiles, "freqcut:f" => \$freqcut , "percut:f" => \$percut , "w1:f" => \$widthsingle, "w2:f" => \$widthmulti , "h|?" => \$h);
if (defined $h) { &usage }

#.............. Print usage ..............
sub usage {	
	print "#==================================================================================\n";
	printf ("%-40s:\t%-50s\n", "# USAGE", "Script takes one or more CMGfunc result tables generated by CMGfunc_analyzeGenome.pl");	
	printf ("%-40s:\t%-50s\n", "# Option", "-freqcut, number to set frequency cutoff for plot. To plot all frequencies in one plot, set -freqcut 0, default is 10");	
	printf ("%-40s:\t%-50s\n", "# Option", "-percut, number to set percentage cutoff for plot. To plot all percentages in one plot, set -percut 0, default is 1");	
	printf ("%-40s:\t%-50s\n", "# Option", "-w1, sets the width of the plot for a single genome, default is 15");	
	printf ("%-40s:\t%-50s\n", "# Option", "-w2, sets the width of the plot for a multiple genomes, default is 20");	
	printf ("%-40s:\t%-50s\n", "# Option", "-w1 and -w2, should be adjusted if the plot does not fit into the PDF");		
	print "#==================================================================================\n";
	printf ("%-40s:\t%-50s\n", "# USAGE"  , "perl CMGfunc_plot_analyzeGenome.pl -freq <name of CMGfunc frequency table file>");	
	printf ("%-40s:\t%-50s\n", "# EXAMPLE", "perl CMGfunc_plot_analyzeGenome.pl -freq file.proteins.fsa.tab.vector.res.table");
	printf ("%-40s:\t%-50s\n", "# EXAMPLE", "perl CMGfunc_plot_analyzeGenome.pl -freq file.proteins.fsa.tab.vector.res.table -w1 25 -freqcut 30");
	printf ("%-40s:\t%-50s\n", "# EXAMPLE", "perl CMGfunc_plot_analyzeGenome.pl -freq file1.proteins.fsa.tab.vector.res.table -freq file2.proteins.fsa.tab.vector.res.table");
	printf ("%-40s:\t%-50s\n", "# EXAMPLE", "perl CMGfunc_plot_analyzeGenome.pl -freq file1.proteins.fsa.tab.vector.res.table -freq file2.proteins.fsa.tab.vector.res.table -w2 30 -freqcut 20");
	print "#==================================================================================\n";
	exit( 1 );	}

#.............. Input files and paths exists ..............

unless (@freqtablefiles)	{	
	print "#==================================================================================\n";
	printf ("%-40s:\t%-50s\n", "# ERROR", "CMGfunc frequency table file not defined, example: perl CMGfunc_plot_analyzeGenome.pl -freq file.fsa.tab.vector.res.table");
	&usage;	exit; }

my $dirname = "multigenome_".scalar(@freqtablefiles).".PLOTS";
print "#==================================================================================\n";
printf ("%-40s:\t%-50s\n", "# RUNNING", "Input is a set of genomes, plots will be saved in $dirname") if scalar(@freqtablefiles) > 1;	
printf ("%-40s:\t%-50s\n", "# RUNNING", "Input is one genome, plots will be saved in ". $freqtablefiles[0]. ".PLOTS") if scalar(@freqtablefiles) == 1;	
print "#==================================================================================\n";


#....... Multi input..........
if (scalar(@freqtablefiles) > 1) {
	`rm -f _tmp  _tmpfunc`;

=put
> df <- read.table("CMGfunc/_tmpfunc", sep="\t")
> str(df)
'data.frame':	2130 obs. of  8 variables:
 $ V1: Factor w/ 2 levels "Escherichia_coli_SE15_uid19053_prodigal724dc46b8ef29559551fb25fc5a38013",..: 2 2 2 2 2 2 2 2 2 2 ...
 $ V2: Factor w/ 3 levels "fsa.tab.vec.res.table:ARCH",..: 1 2 2 1 2 1 1 1 2 1 ...
 $ V3: Factor w/ 759 levels "103","104","105",..: 370 11 95 380 49 316 448 353 102 584 ...
 $ V4: Factor w/ 302 levels "103","104","105",..: NA 35 157 276 83 NA NA 66 165 NA ...
 $ V5: Factor w/ 504 levels "2Fe-2S iron-sulfur cluster binding domain",..: 63 80 108 150 470 420 280 58 178 402 ...
 $ V6: Factor w/ 64 levels "1","10","11",..: 1 25 34 1 4 1 1 23 3 12 ...
 $ V7: Factor w/ 102 levels "0.0207253886010363",..: 1 60 72 1 23 1 1 5 21 3 ...
 $ V8: Factor w/ 483 levels "","0000015::0000287::0004634::0006096",..: 266 124 211 329 86 116 332 249 325 365 ...
>
=cut

	for my $file (@freqtablefiles) {
		unless (-e $file) { printf ("%-40s:\t%-50s\n", "# ERROR", "File doesn't Exist!"); exit; } 
		`sed -i "s/'//" $file`;
		`grep -H -v "#" $file >> _tmp`;
		if (-e "_tmp")	{ `sed 's/\\./\t/1' _tmp >> _tmpfunc` } 
		else		{ printf ("%-40s:\t%-50s\n", "# WARNING", "No functions were detected in $file") }
	}
}

#....... Single input..........
elsif(scalar(@freqtablefiles) == 1) {
	my $file = $freqtablefiles[0];
	unless (-e $file) { printf ("%-40s:\t%-50s\n", "# ERROR", "File Doesn't Exist!"); exit; } 

	`rm -f _tmp  _tmpfunc`;
	`sed -i "s/'//" $file`;

	unless (-e $file) { printf ("%-40s:\t%-50s\n", "# ERROR", "File Doesn't Exist!"); exit; } 
	`sed -i "s/'//" $file`;

	# create temporary file 
	`sed -i "s/'//" $file`;
	`grep -H -v "#" $file > _tmp`;
	if (-e "_tmp")	{ `sed 's/\\./\t/1' _tmp > _tmpfunc` } 
	else		{ printf ("%-40s:\t%-50s\n", "# WARNING", "No functions were detected in $file") }
}


#system("Rscript $CMGfunc_path/CMGfunc_plot_heatmaps.R _tmpfunc $freqcut $percut $widthsingle $widthmulti ");#>& /dev/null");
`Rscript $CMGfunc_path/CMGfunc_plot_heatmaps.R _tmpfunc $freqcut $percut $widthsingle $widthmulti > /dev/null 2>&1`;
`rm -f _tmp  _tmpfunc Rplots.pdf`;

if (scalar(@freqtablefiles) > 1) {
	my $dirname = "multigenome_".scalar(@freqtablefiles).".PLOTS";
	my $file = "multigenome_".scalar(@freqtablefiles);
	`mkdir $dirname` unless (-d $dirname);
	printf ("%-40s:\t%-50s\n", "# INFO"  , "Saving plots to $dirname");	
	`mv plot_freqmulti_high.pdf $dirname/$file.plot_freqmulti_high.pdf`;
	`mv plot_freqmulti_low.pdf $dirname/$file.plot_freqmulti_low.pdf`;
	`mv plot_permulti_high.pdf $dirname/$file.plot_permulti_high.pdf`;
	`mv plot_permulti_low.pdf $dirname/$file.plot_permulti_low.pdf`;
	`mv plot_gomfmulti_mf.pdf $dirname/$file.plot_gomfmulti_mf.pdf`;
	`mv plot_goccmulti_cc.pdf $dirname/$file.plot_goccmulti_cc.pdf`;
	`mv plot_gobpmulti_bp.pdf $dirname/$file.plot_gobpmulti_bp.pdf`;
}
elsif(scalar(@freqtablefiles) == 1) {
	my $file = $freqtablefiles[0];
	`mkdir $file.PLOTS` unless (-d $file.".PLOTS");
	printf ("%-40s:\t%-50s\n", "# INFO"  , "Saving plots to $file.PLOTS");	
	`mv plot_freqsingle_high.pdf $file.PLOTS/$file.plot_freqsingle_high.pdf`;
	`mv plot_freqsingle_low.pdf $file.PLOTS/$file.plot_freqsingle_low.pdf`;
	`mv plot_persingle_high.pdf $file.PLOTS/$file.plot_persingle_high.pdf`;
	`mv plot_persingle_low.pdf $file.PLOTS/$file.plot_persingle_low.pdf` ;
	`mv plot_gomfsingle_mf.pdf $file.PLOTS/$file.plot_gomfsingle_mf.pdf` ;
	`mv plot_goccsingle_cc.pdf $file.PLOTS/$file.plot_goccsingle_cc.pdf`;
	`mv plot_gobpsingle_bp.pdf $file.PLOTS/$file.plot_gobpsingle_bp.pdf` ;
}

