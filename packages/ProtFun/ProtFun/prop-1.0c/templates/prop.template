#!/bin/bash -f

###############################################################################
# FILE:		prop	(ProPeptide Prediction Server)
# VERSION: 	1.0b
# DATE:		Januari 16, 2004
# AUTHORS:	Peter Duckert, peterd@cbs.dtu.dk
# 		Nikolaj Blom, nikob@cbs.dtu.dk
# 
# 		Center for Biological Sequence Analysis
# 		BioCentrum-DTU
# 		Technical University of Denmark
# 		Building 208
# 		DK-2800 Lyngby  Denmark
# 
# 
# Exit codes:	 0		OK
# 		-1		AWK, GNUPLOT or PPM2GIF not found
# 		-2		input file not found
# 		-3		no sequences found in input file
###############################################################################
#
# UPGRADE	1.0b to 1.0c	K. Rapacki, April 2005, minor debugging

###############################################################################
#	GENERAL SETTINGS, CUSTOMIZE
###############################################################################

# full path to ProP directory
PROPHOME="@PROP_LIBRARY_DIR@"

###############################################################################
#	OTHER SETTINGS: NOTHING SHOULD NEED CHANGING BELOW THIS LINE!
###############################################################################

export LANG=C			# else GAWK will fail ...
export PROPBIN=$PROPHOME/bin
export PROPTMP=@TEMP_DIR@/$$
export PROPTXT=$PROPHOME/etc
export PROPETC=$PROPHOME/etc
export PROPHOW=$PROPHOME/how
export PROPSYN=$PROPHOME/syn
export HOW98=$PROPHOW/how98
export WWWOUT=@WWW_OUT_DIR@/$$

f_opt=1			# obsolete option, now default
p_opt=0
s_opt=0
g_opt=0
export v_opt=0
h_opt=0
w_opt=0

infile=()		# use stdin if no file specified
propversion="ProP v.1.0b"

###############################################################################
# handle command-line options 
###############################################################################

for w in $*
do
   case "$w" in
     -p)
	p_opt=1		# General PC prediction
	unf_opt
	;;
     -s)
	s_opt=1		# Include SIGNALP predictions
	;;
      -g)
	g_opt=1		# graphics output
	;;
      -v)
	export v_opt=1		# verbose output
	;;
     -h)
	h_opt=1		# print help message and exit
	;;
     -w)
        w_opt=1		# called by a WWW server
	;;
      *)
        infile=($infile $w)
	;;
    esac
done

###############################################################################
# check for auxiliary programs 
###############################################################################

if [ -z `which gawk` ]
then
   echo ProP: installation error, GAWK not found
   exit -1
fi

PPM2GIF=ppm2gif

if [ $g_opt -eq 1 ]
then
   if [ -z `which gnuplot` ]
   then
      echo ProP: installation error, GNUPLOT not found
      exit -1
   fi
   if [ -z `which ppm2gif` ]
   then
#      echo ProP: ppm2gif not found, checking ppmtogif
      if [ -z `which ppmtogif` ]
      then
          echo "ProP: installation error, ppmtogif/ppm2gif not found"
          exit -1
      else
          PPM2GIF=ppmtogif
      fi
   fi
fi

if [ $s_opt -eq 1 ]
then
   if [ -z `which signalp` ]
   then
      echo ProP: installation error, SIGNALP not found
      exit -1
   fi
fi

###############################################################################
# output help messages  
###############################################################################


if [ $h_opt -eq 1 ]
then				# provide help
   echo usage: prop \[-g\] \[-h\] \[-p\] \[-s\] \[-v\] \[file\] ... 
   exit 0
fi

###############################################################################
# check for existence of input files
###############################################################################

for f in $infile
do
   if [ ! -e $f ]
then				# file not found
      echo prop: \"$f\" not found
      exit -2
   fi
done

###############################################################################
# prediction type description text for graphics
###############################################################################
if [ $g_opt -eq 1 ]
then
   if [ $p_opt -eq 1 ]
then
      predtype="general PC prediction"
   else
      predtype="furin-specific prediction"
   fi
fi

###############################################################################
# Print header in HTML or text
###############################################################################
if [ $w_opt -eq 1 ]
then			# HTML-version
	mkdir $WWWOUT
fi

#echo '\n'
echo "##### $propversion ProPeptide Cleavage Site Prediction #####"
#echo '\n'


if [ $f_opt -eq 1 ]
then			# Furin-type prediction
	echo "##### Furin-type cleavage site prediction (Arginine/Lysine residues) #####"
	#echo '\n'
fi

if [ $p_opt -eq 1 ]
then			# General/total-type prediction
	echo "         ##### General PC cleavage site prediction (Arginine/Lysine residues) #####"
	#echo '\n'
fi

###############################################################################
# Main: read and analyse input, make predictions 
###############################################################################

mkdir ${PROPTMP}
touch ${PROPTMP}/checkfasta
touch ${PROPTMP}/checkfasta.fas
touch ${PROPTMP}/in.all.how
touch ${PROPTMP}/in.all.fas

mkdir $PROPTMP/data

# split multiple FASTA entries into single files in $PROPTMP/data
# perform prediction and output on each file in $PROPTMP/data (if not empty)

gawk -f ${PROPBIN}/fasta2dir -v OUTDIR=$PROPTMP/data $infile

if [ ! `ls -1 $PROPTMP/data | wc -l` ]
then
	echo ProP: no sequences found in \"$infile\", check format
	exit -3
fi

###############################################################################
# for each input sequence ...
###############################################################################
#foreach f ($PROPTMP/data/*)           # [t]csh bug: no * expantion
for ff in `ls $PROPTMP/data/`
do
   f="$PROPTMP/data/$ff"
   if [ `cat $f | wc -l` -eq 1 ]
   then
      # skip if file only has one line (> fasta header)
      echo "ProP: file $f:t invalid or empty"
      #echo '\n\n'
      continue	
   fi
   ############################################################################
   # Syntax check and conversion of non-standard characters
   # Prepare files for HOW run
   # Convert file $f to how-format (in.all.how) using script <in2how>
   # 	-in2how converts illegal/non-AA chars to 'X'  
   ############################################################################

   gawk -f ${PROPBIN}/in2how $f > ${PROPTMP}/in.all.how

   #   gawk -f ${PROPBIN}/in2how+fasta.awk -v informat=fasta \
   #      -v howout=${PROPTMP}/in.all.how \
   #      -v fastaout=${PROPTMP}/in.all.fas $f
	
   if [ -z ${PROPTMP}/in.all.how ]
   then			# if empty howfile
      echo "ProP: no input sequence in $f:t"
      #echo '\n\n'
      continue
   fi
   ############################################################################
   # 	Run prediction scripts
   ############################################################################

   rm -f ${PROPTMP}/rresults

   if [ $f_opt -eq 1 ]
   then
      # predict sites in <in.all.how> using FURIN-specific network
      $PROPBIN/prop_furin ${PROPTMP}/in.all.how > ${PROPTMP}/rresults
   else
      # predict sites in <in.all.how> using GENERAL/TOTAL SET-specific network
      $PROPBIN/prop_total ${PROPTMP}/in.all.how > ${PROPTMP}/rresults
   fi

   ############################################################################
   # If SIGNALP is configured and s_opt given, run signalp
   ############################################################################
   signalpnum=0
   if [ $s_opt -eq 1 ]
   then
      signalpout=(`signalp -t euk -m nn -trunc 100 $f | grep '^# Most'`)
      if [ -n $signalpout ]
      then
         signalptxt=`echo $signalpout | sed 's/^[^b]*b/b/'`
	 signalpnum=$signalpout[8]
      else
         signalptxt=none
      fi
   fi

   ############################################################################
   # If VERBOSE option is selected, don't make pretty output -- dump all scores
   ############################################################################

   if [ $v_opt -eq 1 ]
   then
      cat ${PROPTMP}/rresults			
      continue
   fi
   ############################################################################
   # Post-process output scores
   # 	- Make HOW-like output
   # 	- Show sequence window around sites
   ############################################################################

   # Get positions of predicted sites

   Ppos=`gawk '/P\*$/{print $2;}' ${PROPTMP}/rresults |tr '\012' ','`
   
   #Kpos=\
   #`gawk '/P\*$/{print $2;}' ${PROPTMP}/rresults |tr '\012' ','`
   
   # Produce HOW-like output showing sequence and assignment field
   # with predictions indicated

   if [ $signalpnum -ne 0 ]
   then			# SIGNALP assignment, if any
      sppos=1
      i=2
      while [ $i -le $signalpnum ]
      do
            sppos=${sppos},$i
            i=`expr $i + 1`
      done
      cat ${PROPTMP}/in.all.how | \
         gawk -v B=${sppos}:s -f $PROPBIN/gethow \
         >${PROPTMP}/in.all.how.tmp
      mv ${PROPTMP}/in.all.how.tmp ${PROPTMP}/in.all.how
   fi

   cat ${PROPTMP}/in.all.how | \
      gawk -v B=${Ppos}:P -f $PROPBIN/gethow  \
      > ${PROPTMP}/current_pred.how


   ############################################################################
   # Print how-format output, R/K lists + predictions 
   ############################################################################

   # print HOW-format output
   cat ${PROPTMP}/current_pred.how
   echo " "

   if [ $s_opt -eq 1 ]
   then
      echo Signal peptide cleavage site 'predicted:\t'$signalptxt
      echo " "
   fi

   dubpred=0
   if [ $signalpnum -ne 0 ]
   then
      for pp in `echo $Ppos | tr ',' ' '`
      do
   	 if [ $pp -lt $signalpnum ]
         then
     	    dubpred=`expr $dubpred + 1`
     	 fi
      done
   fi
   if [ $dubpred -gt 1 ]
   then
      end=s
   else
      end=
   fi
   if [ $dubpred -ne 0 ]
   then
#      echo 'WARNING:     '$dubpred' propeptide cleavage site'$end predicted
#      echo '               within the predicted signal peptide\n'
       echo WARNING: $dubpred propeptide cleavage site$end \
          within the predicted signal 'peptide\n'
   fi

   # calculate and print number of predicted sites
   Ppred=`cat ${PROPTMP}/rresults|grep '\*P'|wc -l`
   
   predspec="Propeptide cleavage sites predicted:"
   predspec="${predspec}	Arg(R)/Lys(K): $Ppred"
   echo "${predspec}"
   echo ""

   # print print R,K details
   cat ${PROPTMP}/rresults
   echo ""
   ############################################################################
   # Generate graphics
   ############################################################################

   if [ $g_opt -eq 1 ]
   then
      # data for plotting
      touch $PROPTMP/gr.sp.dat
      if [ $signalpnum -ne 0 ]
      then
         echo $signalpnum 1.3 > $PROPTMP/gr.sp.dat
      else
         echo 0 0 > $PROPTMP/gr.sp.dat
      fi

      gawk '/\|/{print $2,$4;}' $PROPTMP/rresults > $PROPTMP/gr.pp.dat

      # customize GNUPLOT script
      ENAME=`cat ${PROPTMP}/rresults | gawk '/[*]$/{print $1;exit;}'`
      elen=`cat ${PROPTMP}/in.all.how | gawk 'NR==1{print $1;exit;}'`
      elen=`expr $elen + 5`
      PPM2GIF_F=`echo $PPM2GIF | tr '/' '+'`
      PROPTMP_F=`echo $PROPTMP | tr '/' '+'`
      cat $PROPETC/template.gnu | \
         sed 's/_PPM2GIF_/'$PPM2GIF_F'/' | \
	 sed 's/_D_/'$PROPTMP_F'/g' | \
	 sed 's/_NAME_/'$ENAME'/g' | \
	 sed 's/_LEN_/'$elen'/g' | \
	 sed "s/_PRED_/$predtype/g" | \
	 sed 's/+/\//g' \
	 >$PROPTMP/custom.gnu

      # plot
      if [ $w_opt -eq 1 ]
      then
         (gnuplot $PROPTMP/custom.gnu >$WWWOUT/$ENAME.gif) >&/dev/null
         # hyperlink to the figure
	 echo '<img src="http://www.cbs.dtu.dk/services/ProP-1.0/tmp/'$$/$ENAME.gif'">'
      else
         (gnuplot $PROPTMP/custom.gnu > $ENAME.gif) >&/dev/null
      fi
   fi
   
###############################################################################
done # for each input sequence ...
###############################################################################

# clean up
cd /
rm -rf $PROPTMP/*
rm -rf $PROPTMP

###############################################################################
# End of script
###############################################################################
